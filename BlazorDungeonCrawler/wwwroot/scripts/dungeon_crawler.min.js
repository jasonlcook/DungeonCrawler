//D:/Documents/Projects/Vs/BlazorDungeonCrawler/BlazorDungeonCrawler/UncompiledScripts/dungeon_crawler/classes/dungeon_crawler.level.js
class Level {
    constructor() {
        this.tiles;

        this.stageRows;
        this.stageCols;
    }

    loadFirstLevel() {
        this.tiles = null;

        this.stageRows = 9;
        this.stageCols = 7;
    }

    setSpawn() {
        let spawnIndex = Math.floor(Math.random() * this.tiles.length);
        let spawnTitle = this.tiles.get(spawnIndex);

        spawnTitle.Hidden = false;
        spawnTitle.Type = dungeon_crawler.core.globals.tileTypes['entrance'];
    }
}; 
//D:/Documents/Projects/Vs/BlazorDungeonCrawler/BlazorDungeonCrawler/UncompiledScripts/dungeon_crawler/classes/dungeon_crawler.tile.js
class Tile {
    constructor(index, type, x, y) {
        this.Id = dungeon_crawler.core.generateGuid();
        this.Index = index;
        this.Type = type;
        this.Hidden = true;
        this.X = x;
        this.Y = y;
    }
}; 
//D:/Documents/Projects/Vs/BlazorDungeonCrawler/BlazorDungeonCrawler/UncompiledScripts/dungeon_crawler/classes/dungeon_crawler.tiles.js
class Tiles {
    constructor() {
        this.tiles = [];
    }

    get length() {
        return this.tiles.length;
    }

    add(tile) {
        this.tiles.push(tile);
    }

    get(index) {
        if (index < this.tiles.length) {
            return this.tiles[index];
        } else {
            console.log(`Index "${index}" not found`);
        }
    }
}; 
//D:/Documents/Projects/Vs/BlazorDungeonCrawler/BlazorDungeonCrawler/UncompiledScripts/dungeon_crawler/functions/dungeon_crawler.core.js
var dungeon_crawler = dungeon_crawler || {};

dungeon_crawler.core = {
    createEnum(values) {
        const enumObject = {};

        for (const val of values) {
            enumObject[val] = val;
        }

        return Object.freeze(enumObject);
    },

    generateGuid() {
        return URL.createObjectURL(new Blob()).substr(-36);
    }
}
//D:/Documents/Projects/Vs/BlazorDungeonCrawler/BlazorDungeonCrawler/UncompiledScripts/dungeon_crawler/functions/dungeon_crawler.core.globals.js
dungeon_crawler.core.globals = {
    //Consts
    hexHeight: 90,
    hexWidth: 100,

    tileTypes: dungeon_crawler.core.createEnum(['unknown', 'entrance', 'exit', 'stairs_ascending', 'stairs_descending', 'fight', 'loot', 'protection']),

    //Vars
}; 
//D:/Documents/Projects/Vs/BlazorDungeonCrawler/BlazorDungeonCrawler/UncompiledScripts/dungeon_crawler/pages/dungeon_crawler.main.js
dungeon_crawler.main = {
    startup() {
        let level = new Level();
        level.loadFirstLevel();

        dungeon_crawler.core.globals.currentLevel = level;

        dungeon_crawler.main.setTiles(level.stageCols, level.stageRows);
        dungeon_crawler.core.globals.currentLevel.setSpawn();

        dungeon_crawler.main.setStage();
    },

    setTiles(stageCols, stageRows) {
        let hexagonHeight = dungeon_crawler.core.globals.hexHeight;
        let hexagonWidth = dungeon_crawler.core.globals.hexWidth;

        //set stage dimentions
        //  height
        let stageHeight = stageCols * hexagonHeight;

        //  width
        let hexWidthQuaters = hexagonWidth / 4;
        let stageWidth = stageRows * (hexWidthQuaters * 3) + hexWidthQuaters;

        $('#stage').css({ 'height': `${stageHeight}px`, 'width': `${stageWidth}px` });

        //set board
        let hexagonLeft = 0, hexagonTop = 0, hexColumn = 0;

        //  due to the orientation of our board we miss one hex for every other grid row
        let tileCount = (stageCols * stageRows) - Math.ceil((stageRows + 1) / 2);

        dungeon_crawler.core.globals.currentLevel.tiles = new Tiles();

        hexagonTop -= hexagonHeight / 2;
        for (var i = 0; i < tileCount; i++) {
            hexagonTop += hexagonHeight;

            if (hexagonTop >= stageHeight - (hexagonWidth / 2)) {
                //move tile along one place
                hexagonLeft += (hexagonWidth / 4) * 3;

                //reset top
                if ((hexColumn % 2) == 1) {
                    hexagonTop = hexagonHeight - (hexagonHeight / 2);
                } else {
                    hexagonTop = 0;
                }

                //add column
                hexColumn += 1;
            }

            dungeon_crawler.core.globals.currentLevel.tiles.add(new Tile(i, dungeon_crawler.core.globals.tileTypes[0], hexagonLeft, hexagonTop))
        }
    },

    setStage() {
        let tileTypeClass, tileText, tiles = dungeon_crawler.core.globals.currentLevel.tiles;

        for (var i = 0; i < tiles.length; i++) {
            tileTypeClass = 'hexagon-tile-hidden';
            tileText = '';

            tile = tiles.get(i);

            if (!tile.Hidden) {
                if (typeof tile.Hidden == 'undefined' || tile.Hidden == null) {
                    tileTypeClass = 'hexagon-tile-unknown';
                } else {
                    tileText = tile.Index;

                    switch (tile.Type) {
                        //entrance
                        case dungeon_crawler.core.globals.tileTypes['entrance']:
                            tileTypeClass = 'hexagon-tile-entrance';
                            break;
                        //exit
                        case dungeon_crawler.core.globals.tileTypes['exit']:
                            tileTypeClass = 'hexagon-tile-exit';
                            break;
                        case dungeon_crawler.core.globals.tileTypes['stairs_ascending']:
                            tileTypeClass = 'hexagon-tile-stairs-ascending';
                            break;
                        case dungeon_crawler.core.globals.tileTypes['stairs_descending']:
                            tileTypeClass = 'hexagon-tile-stairs-descending';
                            break;
                        case dungeon_crawler.core.globals.tileTypes['fight']:
                            tileTypeClass = 'hexagon-tile-fight';
                            break;
                        case dungeon_crawler.core.globals.tileTypes['loot']:
                            tileTypeClass = 'hexagon-tile-loot';
                            break;
                        case dungeon_crawler.core.globals.tileTypes['protection']:
                            tileTypeClass = 'hexagon-tile-protection';
                            break;
                        default:
                        case dungeon_crawler.core.globals.tileTypes['unknown']:
                            tileTypeClass = 'hexagon-tile-unknown';
                            break;
                    }
                }                
            }

            $('#stage').append(`<div class="hexagon-tile ${tileTypeClass}" style="left: ${tile.X}px; top: ${tile.Y}px"><span>${tileText}</span></div>`);
        }
    }
};

window['dungeon_crawler_main_startup'] = dungeon_crawler.main.startup;
