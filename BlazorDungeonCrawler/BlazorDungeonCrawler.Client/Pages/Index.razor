@page "/"

@inject IJSRuntime JS
@inject IDungeonDataManager DungeonManager
@inject HttpClient Http

<HeadContent>
    <link href="css/cssreset-min.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />

    <script src="scripts/jquery-3.7.1.min.js"></script>
    <script src="scripts/dungeon_crawler.min.js"></script>
</HeadContent>

<div id="play-area">
    <div id="dungeon">
        <div id="stage">
            @if (dungeon == null) {
                <div class="loading">
                    <img src="/images/tiles/blue/base_tile.png" />
                </div>
            } else {
                @((MarkupString)tilesHtml)
            }

        </div>
    </div>
    <div class="button">
        <button id="advance" disabled>Advance</button>
    </div>
    <div class="details">
        <div class="adventurer">
            <div class="level">
                <span class="label">Level</span>
                <span class="value" id="current-level">
                    @((MarkupString)dungeonDepth)
                </span>
            </div>
            <div class="stats">
                <div class="health">
                    <span class="label">Health</span>
                    <span class="value" id="current-health">
                        @((MarkupString)health)
                    </span>
                </div>
                <div class="damage">
                    <span class="label">Damage</span>
                    <span class="value" id="current-damage">
                        @((MarkupString)damage)
                    </span>
                </div>
                <div class="protection">
                    <span class="label">Protection</span>
                    <span class="value" id="current-protection">
                        @((MarkupString)protection)
                    </span>
                </div>
            </div>
            <div class="dice"></div>
        </div>
        <div id="log"></div>
    </div>
</div>

<div id="version">
    <span class="api-version">
        @((MarkupString)apiVersion)
    </span>
    <span class="client-version">Client V0.2.1</span>
</div>

<script>
    //wait for startup to become avalible.
    function getStartup(args) {
        if (
            window.dungeon_crawler != 'undefined' && window.dungeon_crawler != null &&
            window.dungeon_crawler.main != 'undefined' && window.dungeon_crawler.main != null &&
            window.dungeon_crawler.main.startup != 'undefined' && window.dungeon_crawler.main.startup != null && typeof (window.dungeon_crawler.main.startup) == 'function'
        ) {
            window.dungeon_crawler.main.startup(args);
        } else {
            setTimeout(getStartup, 100);
        }
    };
</script>

@code {
    Dungeon? dungeon = null;
    string apiVersion = "API V0.0.0";

    string dungeonDepth = "0";

    string health = "0";
    string damage = "0";
    string protection = "0";

    bool advanceButtonDisabled = true;

    string tilesHtml = "";

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await SetupDungeon();
        }
    }

    async Task SetupDungeon() {
        dungeon = await DungeonManager.GenerateNewDungeon();
        apiVersion = $"API V{dungeon.ApiVersion}";

        dungeonDepth = dungeon.Level.Depth.ToString();

        health = dungeon.Adventurer.HealthBase.ToString();
        damage = dungeon.Adventurer.DamageBase.ToString();
        protection = dungeon.Adventurer.ProtectionBase.ToString();

        string colourClass = getColourClass(dungeon.Level.Depth);
        string tileTypeClass;
        foreach (Tile tile in dungeon.Level.Tiles) {
            tileTypeClass = "hexagon-tile-hidden";

            if (!tile.Hidden) {
                tileTypeClass = GetTypeClass(tile.Type);
            }

            //base tiles
            tilesHtml += $"<div class='hexagon-tile-group' data-row='{tile.Row}' data-column='{tile.Column}'>";
            tilesHtml += $"<div class='hexagon-tile {colourClass} hexagon-tile-base'><span></span></div>";

            if (tile.Hidden) {
                //hidden tiles
                tilesHtml += $"<div class='hexagon-tile hexagon-tile-hidden'><span></span></div>";
            } else {
                //tile images
                tilesHtml += $"<div class='hexagon-tile {colourClass} {tileTypeClass}'><span></span></div>";

                if (!tile.Current) {
                    //tile overlays
                    tilesHtml += $"<div class='hexagon-tile hexagon-for-of-war'><span></span></div>";
                }
            }

            if (tile.Selectable) {
                //selectable tile
                tilesHtml += $"<div data-identity='{tile.Id}' class='hexagon-tile {colourClass} hexagon-tile-selectable'><span></span></div>";
            }
            tilesHtml += "</div>";
        }

        await InvokeAsync(StateHasChanged);
        await JS.InvokeVoidAsync("getStartup", $"{{\"rows\": {dungeon.Level.Rows}, \"columns\": {dungeon.Level.Columns} }}");
    }

    string getColourClass(int dungeonDepth) {
        switch (dungeonDepth) {
            case 1:
            case 2:
            case 3:
            return "hexagon-colour-red";
            case 4:
            case 5:
            case 6:
            case 7:
            return "hexagon-colour-blue";
            case 8:
            return "hexagon-colour-purple";
            case 9:
            return "hexagon-colour-green";
            case 10:
            return "hexagon-colour-pink";
        }

        return "hexagon-colour-unknown";
    }

    string GetTypeClass(DungeonEvemts type) {
        switch (type) {
            case DungeonEvemts.Empty:
            return "hexagon-tile-empty";
            case DungeonEvemts.DungeonEntrance:
            return "hexagon-tile-entrance";
            case DungeonEvemts.StairsAscending:
            return "hexagon-tile-stairs-ascending";
            case DungeonEvemts.StairsDescending:
            return "hexagon-tile-stairs-descending";
            case DungeonEvemts.Fight:
            return "hexagon-tile-fight";
            case DungeonEvemts.FightWon:
            return "hexagon-tile-fight-won";
            case DungeonEvemts.FightLost:
            return "hexagon-tile-adventurer-death";
            case DungeonEvemts.Chest:
            return "hexagon-tile-chest";
            case DungeonEvemts.FoundWeapon:
            return "hexagon-tile-weapon";
            case DungeonEvemts.FoundProtection:
            return "hexagon-tile-protection";
            case DungeonEvemts.FoundPotion:
            return "hexagon-tile-potion";
            case DungeonEvemts.TakenWeapon:
            return "hexagon-tile-weapon";
            case DungeonEvemts.TakenProtection:
            return "hexagon-tile-protection";
            case DungeonEvemts.TakenPotion:
            return "hexagon-tile-potion";
            case DungeonEvemts.Macguffin:
            return "hexagon-tile-macguffin";
        }

        return "hexagon-tile-unknown";
    }
}
