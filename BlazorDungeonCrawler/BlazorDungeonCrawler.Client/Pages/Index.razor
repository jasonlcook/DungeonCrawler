@page "/"
@using BlazorDungeonCrawler.Shared.Enumerators;
@using BlazorDungeonCrawler.Shared.Responses;
@using BlazorDungeonCrawler.Shared.Interfaces;

@inject IJSRuntime JS
@inject IDungeonDataManager DungeonManager
@inject HttpClient Http

@if (rejectedCookie == false && foundCookie != null && foundCookie == false) {
    <div id="cookie-consent" class="alert alert-info alert-dismissible fade show" role="alert">
        Would you like a cookie?
        <button type="button" class="accept-policy close dungeon-button" @onclick="RejectCookies">
            Reject Cookie
        </button>
        <button type="button" class="accept-policy close dungeon-button" @onclick="AcceptCookies">
            Accept Cookie
        </button>
    </div>
}

<div id="play-area">
    <div id="dungeon">
        <div id="messages">
            @if (errorMessages.Count > 0) {
                foreach (string message in errorMessages) {
                    <div class="message message-error">
                        @message
                    </div>
                }
            }

            @if (infoMessages.Count > 0) {
                foreach (string message in infoMessages) {
                    <div class="message message-info">
                        @message
                    </div>
                }
            }
        </div>
        <div id="stage">
            @if (dungeon == null) {
                <div class="loading">
                    <img src="/images/tiles/blue/base_tile.png" />
                </div>
            } else {
                try {
                    string colourClass = getColourClass(dungeonDepth);

                    var orderedTiles = GetOrderTiles();

                    if (orderedTiles != null) {
                        string selectableClass = string.Empty;
                        foreach (Tile tile in orderedTiles) {
                            <div class="hexagon-tile-group" data-row="@tile.Row" data-column="@tile.Column">
                                <div class="hexagon-tile @colourClass hexagon-tile-base"></div>

                                @if (tile.Current) {
                                    <div class="hexagon-tile hexagon-tile-current"></div>
                                }

                                @if (tile.Selectable) {
                                    selectableClass = "hexagon-tile-selectable";
                                    @if (tile.Hidden) {
                                        selectableClass = "hexagon-tile-hidden-selectable";
                                    }

                                    <div class="hexagon-tile @colourClass @selectableClass ">
                                        <span @onclick="@(() => SelectTile(tile.Id))"></span>
                                    </div>
                                }

                                @if (tile.Hidden) {
                                    <div class="hexagon-tile hexagon-tile-hidden"></div>
                                } else {
                                    <div class="hexagon-tile @colourClass @GetTypeClass(tile.Type)"></div>

                                    @if (!tile.Current && !tile.Selectable) {
                                        <div class="hexagon-tile hexagon-for-of-war"></div>
                                    }
                                }

                                @if (tile.Monsters.Count > 0) {
                                    foreach (Monster monster in tile.Monsters) {
                                        string monsterTop = $"{monster.ClientY}px";
                                        string monsterLeft = $"{monster.ClientX}px";

                                        <span class="monster-counter" style="top: @monsterTop; left: @monsterLeft;">
                                            <span class="monster-counter-health">
                                                @monster.Health
                                            </span>
                                        </span>
                                    }
                                }
                            </div>
                        }
                    }
                } catch (Exception ex) {
                    errorMessages.Add(ex.Message);
                }
            }
        </div>

        @if (dungeon != null && dungeon.InCombat) {
            <div id="action-dialog">
                <div class="action-dialog-body">BODY</div>
                <div class="action-dialog-buttons">
                    <button @onclick="MonsterFight" class="dungeon-button">Fight</button>
                    <button @onclick="MonsterFlee" class="dungeon-button">Flee</button>
                </div>
            </div>
        }
    </div>
    <div class="button">
        <button id="advance" class="dungeon-button" disabled>Advance</button>
    </div>
    <div class="details">
        <div class="adventurer">
            <div class="dungeon-level">
                <span class="label">Depth</span>
                <span class="value" id="current-level">
                    @((MarkupString)dungeonDepth.ToString())
                </span>
            </div>
            <div class="adventurer-stats">
                <div class="adventurer-stats-section">
                    <div class="adventurer-stats-row adventurer-stats-row-total">
                        <span class="label">Level</span>
                        <span class="value">
                            @((MarkupString)level.ToString())
                        </span>
                    </div>
                    <div class="adventurer-stats-row adventurer-stats-row-total">
                        <span class="label">Experience</span>
                        <span class="value">
                            @((MarkupString)experience)
                        </span>
                    </div>
                </div>
                <div class="adventurer-stats-section">
                    @if (auraPotionDuration != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Aura potion</span>
                            <span class="value">
                                @((MarkupString)auraPotion)
                            </span>
                            <span class="duration">
                                @((MarkupString)auraPotionDuration)
                            </span>
                        </div>
                    }

                    @if (auraPotionDuration != string.Empty) {
                        <div class="adventurer-stats-row adventurer-stats-row-base">
                            <span class="label">Base</span>
                            <span class="value">
                                @((MarkupString)healthBase)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    <div class="adventurer-stats-row adventurer-stats-row-total">
                        <span class="label">Health</span>
                        <span class="value">
                            @((MarkupString)health)
                        </span>
                    </div>
                </div>

                <div class="adventurer-stats-section">
                    @if (damagePotionDuration != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Damage potion</span>
                            <span class="value">
                                @((MarkupString)damagePotion)
                            </span>
                            <span class="duration">
                                @((MarkupString)damagePotionDuration)
                            </span>
                        </div>
                    }

                    @if (weapon != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Weapon</span>
                            <span class="value">
                                @((MarkupString)weapon)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    @if (damagePotionDuration != string.Empty || weapon != string.Empty) {
                        <div class="adventurer-stats-row adventurer-stats-row-base">
                            <span class="label">Base</span>
                            <span class="value">
                                @((MarkupString)damageBase)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    <div class="adventurer-stats-row adventurer-stats-row-total">
                        <span class="label">Damage</span>
                        <span class="value">
                            @((MarkupString)damage)
                        </span>
                    </div>
                </div>

                <div class="adventurer-stats-section">
                    @if (shieldPotionDuration != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Shield potion</span>
                            <span class="value">
                                @((MarkupString)shieldPotion)
                            </span>
                            <span class="duration">
                                @((MarkupString)shieldPotionDuration)
                            </span>
                        </div>
                    }

                    @if (armourHelmet != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Helmet</span>
                            <span class="value">
                                @((MarkupString)armourHelmet)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    @if (armourBreastplate != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Breastplate</span>
                            <span class="value">
                                @((MarkupString)armourBreastplate)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    @if (armourGauntlet != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Gauntlet</span>
                            <span class="value">
                                @((MarkupString)armourGauntlet)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    @if (armourGreave != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Greave</span>
                            <span class="value">
                                @((MarkupString)armourGreave)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    @if (armourBoots != string.Empty) {
                        <div class="adventurer-stats-row">
                            <span class="label">Boots</span>
                            <span class="value">
                                @((MarkupString)armourBoots)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    @if (shieldPotionDuration != string.Empty || armourHelmet != string.Empty || armourBreastplate != string.Empty || armourGauntlet != string.Empty || armourGreave != string.Empty || armourBoots != string.Empty) {
                        <div class="adventurer-stats-row adventurer-stats-row-base">
                            <span class="label">Base</span>
                            <span class="value">
                                @((MarkupString)protectionBase)
                            </span>
                            <span class="duration">&nbsp;</span>
                        </div>
                    }

                    <div class="adventurer-stats-row adventurer-stats-row-total">
                        <span class="label">Protection</span>
                        <span class="value">
                            @((MarkupString)protection)
                        </span>
                    </div>
                </div>
            </div>
            <div class="dice"></div>
        </div>
        <div id="log">
            @if (dungeon == null) {
                <div class="log-entry">
                    <span class="log-entry-message">loading.</span>
                </div>
            } else {
                try {
                    if (dungeon.Messages != null) {
                        List<Message> messages = dungeon.Messages.OrderBy(m => m.Index).OrderBy(m => m.Datestamp).ToList();

                        if (messages != null && messages.Count > 0) {
                            foreach (Message message in messages) {
                                <div data-identity="@message.Id" class="log-entry">
                                    <span class="log-entry-message">
                                        @message.Text
                                    </span>
                                    @*
                //todo add log action
                <ol class="log-actions" hidden="hidden" style="display: none;">
                <li data-identity="8ad049f1-279c-4e8e-a616-f433ce005468"><span class="log-action-message">Health roll 9</span></li>
                <li data-identity="8b4b8c0d-6e86-42a2-a534-e8ae7af0b80a"><span class="log-action-message">Protection roll 3</span></li>
                <li data-identity="6692b01e-ac55-4441-86f8-02031116a569"><span class="log-action-message">Damage roll 6</span></li>
                </ol>
                *@
                                </div>
                            }
                        }
                    } else {
                        throw new Exception("Dungeon Messages response was badly formed.");
                    }
                } catch (Exception ex) {
                    errorMessages.Add(ex.Message);
                }
            }
        </div>
    </div>
</div>
<div id="dungeon-footer">
    <div id="version">
        <span class="api-version">
            @((MarkupString)apiVersion)
        </span>
        <span class="client-version">Client V0.2.1</span>
    </div>
</div>

@code {
    //Cookies
    bool? foundCookie = null;
    bool rejectedCookie = false;
    string cookieKeyId = "BlazorWebAppCookies-Id";

    Guid cookiePlaceholder = Guid.Empty;
    Guid cookieId = Guid.Empty;

    protected override void OnInitialized() {
        if (foundCookie == null) {
            CheckCookies();
        }
    }

    private async void AcceptCookies() {
        Guid dungeonId = cookiePlaceholder;

        if (dungeon != null && dungeon.Id != Guid.Empty) {
            dungeonId = dungeon.Id;
        }

        StoreCookie(dungeonId);

        await InvokeAsync(StateHasChanged);
    }

    private async void RejectCookies() {
        rejectedCookie = true;

        await InvokeAsync(StateHasChanged);
    }

    private string BakeCookie(string key, string value, double days) {
        string dateStamp = "";
        if (days > 0) {
            dateStamp = DateTime.Now.AddDays(days).ToUniversalTime().ToString("R");
        }

        return $"{key}={value}; expires={dateStamp}; path=/";
    }

    private async void CheckCookies() {
        string response = GetCookie();
        Dictionary<string, string> cookies = ParseCookieResponse(response);

        if (cookies.ContainsKey(cookieKeyId)) {
            foundCookie = true;

            if (Guid.TryParse(cookies[cookieKeyId], out cookieId)) {
                await WriteLog($"COOKIEID: {cookieId}");
            }
        } else {
            foundCookie = false;
        }
    }

    private Dictionary<string, string> ParseCookieResponse(string value) {
        Dictionary<string, string> cookies = new();

        if (!string.IsNullOrEmpty(value)) {
            string[] values = value.Split(';');

            string cookieKey, cookieValue;
            foreach (string val in values) {
                cookieKey = val.Substring(0, val.IndexOf('=')).Trim();
                cookieValue = val.Substring(val.IndexOf('=') + 1);
                cookies.Add(cookieKey, cookieValue);
            }
        }

        return cookies;
    }

    private async void StoreCookie(Guid dungeonId) {
        string safeDungeonId = dungeonId.ToString();
        string cookie = BakeCookie(cookieKeyId, safeDungeonId, 7);
        await SetCookie(cookie);
    }

    private async Task SetCookie(string cookie) {
        await JS.InvokeVoidAsync("eval", $"document.cookie = \"{cookie}\"");
    }

    private string GetCookie() {
        return ((IJSInProcessRuntime)JS).Invoke<string>("eval", $"document.cookie");
    }

    public async Task WriteLog(string message) {
        await this.JS.InvokeVoidAsync("console.log", message);
    }

    //Dungeon
    List<string> errorMessages = new();
    List<string> infoMessages = new();

    bool successfulLoad = false;

    Dungeon? dungeon = null;
    Tile? tile = null;

    string apiVersion = "API V0.0.0";

    int dungeonDepth = 0;

    int level = 0;
    string experience = "0 / 0";

    string health = "0 / 0";
    string healthBase = string.Empty;
    string auraPotion = string.Empty;
    string auraPotionDuration = string.Empty;

    string damage = "0";
    string damageBase = string.Empty;
    string damagePotion = string.Empty;
    string damagePotionDuration = string.Empty;
    string weapon = string.Empty;

    string protection = "0";
    string protectionBase = string.Empty;
    string shieldPotion = string.Empty;
    string shieldPotionDuration = string.Empty;
    string armourHelmet = string.Empty;
    string armourBreastplate = string.Empty;
    string armourGauntlet = string.Empty;
    string armourGreave = string.Empty;
    string armourBoots = string.Empty;

    bool advanceButtonDisabled = true;

    string tilesHtml = "";

    protected override async void OnAfterRender(bool firstRender) {
        if (dungeon == null) {
            if (cookieId != Guid.Empty) {
                try {
                    dungeon = await DungeonManager.GetDungeon(cookieId);
                } catch (Exception ex) {
                    errorMessages.Add(ex.Message);
                }
            }

            if (dungeon == null || dungeon.Id == Guid.Empty) {
                try {
                    dungeon = await DungeonManager.GenerateNewDungeon();
                } catch (Exception ex) {
                    errorMessages.Add(ex.Message);
                }
            }

            if (dungeon != null && dungeon.Id != Guid.Empty) {
                if (foundCookie == true && cookieId != dungeon.Id) {
                    StoreCookie(dungeon.Id);
                }

                apiVersion = $"API V{dungeon.ApiVersion}";

                bool updateSuccess = await UpdateValues();
                if (!updateSuccess) {
                    infoMessages.Add("Dungeon values could not be set.");
                }
            } else {
                throw new Exception("Dungeon response was badly formed.");
            }
        } else {
            //infoMessages.Add("Dungeon response not ready.");
        }

        if (dungeon != null && dungeon.Id != Guid.Empty && successfulLoad != true && dungeon.Levels != null) {
            DungeonRefresh();
        } else {
            //infoMessages.Add("Dungeon response not ready.");
        }
    }

    private async void DungeonRefresh() {
        if (dungeon != null && dungeon.Id != Guid.Empty && dungeon.Levels != null) {
            tile = new();
            Level? level = dungeon.Levels.Where(l => l.Depth == dungeon.Depth).FirstOrDefault();
            if (level != null && level.Id != Guid.Empty) {
                try {
                    successfulLoad = await JS.InvokeAsync<bool>("dungeon_crawler.main.startup", $"{{\"rows\": {level.Rows}, \"columns\": {level.Columns} }}");

                    if (successfulLoad != true) {
                        infoMessages.Add("Main startup not ready.");

                        await InvokeAsync(StateHasChanged);
                    }
                } catch (Exception ex) {
                    throw new Exception("Dungeon response was badly formed.");
                }
            }
        }
    }

    private string getColourClass(int dungeonDepth) {
        switch (dungeonDepth) {
            case 1:
            case 2:
            case 3:
                return "hexagon-colour-red";
            case 4:
            case 5:
            case 6:
            case 7:
                return "hexagon-colour-blue";
            case 8:
                return "hexagon-colour-purple";
            case 9:
                return "hexagon-colour-green";
            case 10:
                return "hexagon-colour-pink";
            default:
                infoMessages.Add("Colour class dungeon depth");
                return "hexagon-colour-unknown";
        }
    }

    private string GetTypeClass(DungeonEvents type) {
        switch (type) {
            case DungeonEvents.Empty:
                return "hexagon-tile-empty";
            case DungeonEvents.DungeonEntrance:
                return "hexagon-tile-entrance";
            case DungeonEvents.StairsAscending:
                return "hexagon-tile-stairs-ascending";
            case DungeonEvents.StairsDescending:
                return "hexagon-tile-stairs-descending";
            case DungeonEvents.Fight:
                return "hexagon-tile-fight";
            case DungeonEvents.FightWon:
                return "hexagon-tile-fight-won";
            case DungeonEvents.FightLost:
                return "hexagon-tile-adventurer-death";
            case DungeonEvents.Chest:
                return "hexagon-tile-chest";
            case DungeonEvents.FoundWeapon:
                return "hexagon-tile-weapon";
            case DungeonEvents.FoundProtection:
                return "hexagon-tile-protection";
            case DungeonEvents.FoundPotion:
                return "hexagon-tile-potion";
            case DungeonEvents.TakenWeapon:
                return "hexagon-tile-weapon";
            case DungeonEvents.TakenProtection:
                return "hexagon-tile-protection";
            case DungeonEvents.TakenPotion:
                return "hexagon-tile-potion";
            case DungeonEvents.Macguffin:
                return "hexagon-tile-macguffin";
            default:
                infoMessages.Add("Type class dungeon event");
                return "hexagon-tile-unknown";
        }
    }

    private async Task<bool> SelectTile(Guid tileId) {
        if (dungeon != null && dungeon.Id != Guid.Empty && tileId != Guid.Empty) {
            try {
                dungeon = await DungeonManager.SelectDungeonTile(dungeon.Id, tileId);
            } catch (Exception ex) {
                errorMessages.Add(ex.Message);
            }

            bool updateSuccess = await UpdateValues();

            if (dungeon.RefreshRequired == true) {
                DungeonRefresh();
            }

            await InvokeAsync(StateHasChanged);

            return true;
        } else {
            //todo: trap error
        }

        return false;
    }

    private async Task<bool> UpdateValues() {
        int adventurerLevel = 0;
        int adventurerNextLevelCost = 0;
        int adventurerExperience = 0;

        int adventurerAuraPotion = 0;
        int adventurerDamagePotion = 0;
        int adventurerShieldPotion = 0;

        int adventurerWeapon = 0;

        int adventurerArmourHelmet = 0;
        int adventurerArmourBreastplate = 0;
        int adventurerArmourGauntlet = 0;
        int adventurerArmourGreave = 0;
        int adventurerArmourBoots = 0;

        if (dungeon == null || dungeon.Id == Guid.Empty) {
            throw new Exception("Dungeon response was badly formed.");
        }

        if (dungeon.Adventurer == null || dungeon.Adventurer.Id == Guid.Empty) {
            throw new Exception("Dungeon Adventurer response was badly formed.");
        }

        dungeonDepth = dungeon.Depth;

        //Level
        adventurerExperience = dungeon.Adventurer.Experience;
        adventurerNextLevelCost = dungeon.Adventurer.NextLevelCost;
        adventurerLevel = dungeon.Adventurer.Level;

        level = adventurerLevel;
        experience = $"{adventurerExperience} / {adventurerNextLevelCost}";

        //Health
        healthBase = dungeon.Adventurer.HealthBase.ToString();

        //  Potion
        auraPotionDuration = string.Empty;
        if (dungeon.Adventurer.AuraPotionDuration > 0) {
            adventurerAuraPotion = dungeon.Adventurer.AuraPotion;
            auraPotion = adventurerAuraPotion.ToString();
            auraPotionDuration = dungeon.Adventurer.AuraPotionDuration.ToString();
        }
        health = $"{dungeon.Adventurer.HealthBase + adventurerAuraPotion} / {dungeon.Adventurer.HealthInitial}";

        //Damage
        damageBase = dungeon.Adventurer.DamageBase.ToString();

        //  Potion
        damagePotionDuration = string.Empty;
        if (dungeon.Adventurer.DamagePotionDuration > 0) {
            adventurerDamagePotion = dungeon.Adventurer.DamagePotion;
            damagePotion = adventurerDamagePotion.ToString();
            damagePotionDuration = dungeon.Adventurer.DamagePotionDuration.ToString();
        }

        //  Weapon
        if (dungeon.Adventurer.Weapon > 0) {
            adventurerWeapon = dungeon.Adventurer.Weapon;
            weapon = adventurerWeapon.ToString();
        }

        damage = (dungeon.Adventurer.DamageBase + adventurerDamagePotion + adventurerWeapon).ToString();

        //Protection
        protectionBase = dungeon.Adventurer.ProtectionBase.ToString();

        //  Potion
        shieldPotionDuration = string.Empty;
        if (dungeon.Adventurer.ShieldPotionDuration > 0) {
            adventurerShieldPotion = dungeon.Adventurer.ShieldPotion;
            shieldPotion = adventurerShieldPotion.ToString();
            shieldPotionDuration = dungeon.Adventurer.ShieldPotionDuration.ToString();
        }

        //  Armour
        //      Helmet
        armourHelmet = string.Empty;
        if (dungeon.Adventurer.ArmourHelmet > 0) {
            adventurerArmourHelmet = dungeon.Adventurer.ArmourHelmet;
            armourHelmet = adventurerArmourHelmet.ToString();
        }

        //      Breastplate
        armourBreastplate = string.Empty;
        if (dungeon.Adventurer.ArmourBreastplate > 0) {
            adventurerArmourBreastplate = dungeon.Adventurer.ArmourBreastplate;
            armourBreastplate = adventurerArmourBreastplate.ToString();
        }

        //      Gauntlet
        armourGauntlet = string.Empty;
        if (dungeon.Adventurer.ArmourGauntlet > 0) {
            adventurerArmourGauntlet = dungeon.Adventurer.ArmourGauntlet;
            armourGauntlet = adventurerArmourGauntlet.ToString();
        }

        //      Greave
        armourGreave = string.Empty;
        if (dungeon.Adventurer.ArmourGreave > 0) {
            adventurerArmourGreave = dungeon.Adventurer.ArmourGreave;
            armourGreave = adventurerArmourGreave.ToString();
        }

        //      Boots
        armourBoots = string.Empty;
        if (dungeon.Adventurer.ArmourBoots > 0) {
            adventurerArmourBoots = dungeon.Adventurer.ArmourBoots;
            armourBoots = adventurerArmourBoots.ToString();
        }

        protection = (dungeon.Adventurer.ProtectionBase + adventurerShieldPotion + adventurerArmourHelmet + adventurerArmourBreastplate + adventurerArmourGauntlet + adventurerArmourGreave + adventurerArmourBoots).ToString();

        await InvokeAsync(StateHasChanged);

        return true;
    }

    private List<Tile> GetOrderTiles() {
        if (dungeon != null && dungeon.Id != Guid.Empty && dungeon.Levels != null) {
            Level? level = dungeon.Levels.Where(l => l.Depth == dungeon.Depth).FirstOrDefault();
            if (level != null && level.Id != Guid.Empty) {
                return level.Tiles.OrderBy(t => t.Row).OrderBy(t => t.Column).ToList();
            } else {
                throw new Exception("Dungeon Level response was badly formed.");
            }
        } else {
            throw new Exception("Could not place tiles as Dungeon response was badly formed.");
        }
    }

    private async Task<bool> MonsterFlee() {
        if (dungeon == null || dungeon.Id == Guid.Empty || dungeon.CombatTile == Guid.Empty) {
            //todo: report error
            return false;
        }

        try {
            dungeon = await DungeonManager.MonsterFlee(dungeon.Id, dungeon.CombatTile);
            bool updateSuccess = await UpdateValues();

            return true;
        } catch (Exception ex) {
            errorMessages.Add(ex.Message);

            await InvokeAsync(StateHasChanged);
        }

        return false;
    }

    private async Task<bool> MonsterFight() {
        if (dungeon == null || dungeon.Id == Guid.Empty || dungeon.CombatTile == Guid.Empty) {
            //todo: report error
            return false;
        }

        try {
            dungeon = await DungeonManager.MonsterFight(dungeon.Id, dungeon.CombatTile);
            bool updateSuccess = await UpdateValues();

            return true;

        } catch (Exception ex) {
            errorMessages.Add(ex.Message);

            await InvokeAsync(StateHasChanged);
        }

        return false;
    }
}
