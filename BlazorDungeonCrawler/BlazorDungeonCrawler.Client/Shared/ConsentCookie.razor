@inject IJSRuntime JsRuntime

@if (foundCookie != null && foundCookie == false) {
    <div id="cookieConsent" class="alert alert-info alert-dismissible fade show" role="alert">
        Consent to set cookies.
        <button type="button" class="accept-policy close" data-dismiss="alert" aria-label="Close" @onclick="AcceptCookies">
            Accept Cookie
        </button>
    </div>
}

@code {
    bool? foundCookie = null;
    string cookieKeyId = "BlazorWebAppCookies-Id";
    string cookieId = string.Empty;

    protected override void OnInitialized() {
        if (foundCookie == null) {
            CheckCookies();
        }
    }

    private async void AcceptCookies() {
        foundCookie = true;
        string cookie = BakeCookie(cookieKeyId, Guid.NewGuid().ToString(), 7);
        await SetCookie(cookie);
    }

    private string BakeCookie(string key, string value, double days) {
        string dateStamp = "";
        if (days > 0) {
            dateStamp = DateTime.Now.AddDays(days).ToUniversalTime().ToString("R");
        }

        return $"{key}={value}; expires={dateStamp}; path=/";
    }

    private async void CheckCookies() {
        string response = GetCookie();
        Dictionary<string, string> cookies = ParseCookieResponse(response);

        if (cookies.ContainsKey(cookieKeyId)) {
            foundCookie = true;
            cookieId = cookies[cookieKeyId];
            await WriteLog($"COOKIEID: {cookieId}");
        } else {
            foundCookie = false;
        }
    }

    private Dictionary<string, string> ParseCookieResponse(string value) {
        Dictionary<string, string> cookies = new();

        if (!string.IsNullOrEmpty(value)) {
            string[] values = value.Split(';');

            string cookieKey, cookieValue;
            foreach (string val in values) {
                cookieKey = val.Substring(0, val.IndexOf('=')).Trim();
                cookieValue = val.Substring(val.IndexOf('=') + 1);
                cookies.Add(cookieKey, cookieValue);
            }
        }

        return cookies;
    }

    private async Task SetCookie(string cookie) {
        await JsRuntime.InvokeVoidAsync("eval", $"document.cookie = \"{cookie}\"");
    }

    private string GetCookie() {
        return ((IJSInProcessRuntime)JsRuntime).Invoke<string>("eval", $"document.cookie");
    }

    public async Task WriteLog(string message) {
        await this.JsRuntime.InvokeVoidAsync("console.log", message);
    }
}